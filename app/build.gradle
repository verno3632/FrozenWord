import com.android.build.api.dsl.ManagedVirtualDevice

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'de.mannodermaus.android-junit5'
}

android {
    compileSdk 32
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "jp.developer.retia.frozenword"
        minSdk 23
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "jp.developer.retia.frozenword.CustomTestRunner"
//        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        testInstrumentationRunnerArgument "runnerBuilder", "de.mannodermaus.junit5.AndroidJUnit5Builder"

        vectorDrawables {
            useSupportLibrary true
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        debug {
            isDefault true
            debuggable true
            minifyEnabled false
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion composeCompilerVersion
    }

    testOptions {
        junitPlatform {
            filters {
                engines {
                    include 'spek2'
                }
            }
            jacocoOptions {
                // here goes all jacoco config, for example
                html.enabled = true
                xml.enabled = false
                csv.enabled = false
            }
        }
        unitTests.all {
            testLogging.events = ["passed", "skipped", "failed"]
        }
        packagingOptions {
            jniLibs {
                useLegacyPackaging true
            }
        }
        devices {
            pixel2Api25(ManagedVirtualDevice) {
                device = "Pixel 2"
                apiLevel = 29
                systemImageSource = "google"
                abi = "x86"
            }

        }
    }
    packagingOptions {
        resources {
            pickFirsts += ['META-INF/AL2.0', 'META-INF/licenses/ASM', 'META-INF/LGPL2.1', 'win32-x86/attach_hotspot_windows.dll', 'win32-x86-64/attach_hotspot_windows.dll']
        }
    }
    namespace 'jp.developer.retia.frozenword'
}

dependencies {
    implementation libs.androidx.core
    implementation libs.androidx.appcompat
    implementation libs.android.material
    implementation libs.compose.material
    implementation libs.compose.ui
    implementation libs.compose.uitooling
    implementation libs.lifecycle.runtimeKtx
    implementation libs.activity.compose
    implementation libs.navigation.compose

    implementation libs.accompanist.pager

    implementation libs.dagger.hilt
    kapt libs.dagger.hiltCompiler

    implementation libs.room.ktx
    kapt libs.room.compiler

    implementation libs.kotlin.stdlib

    implementation platform(libs.coroutines.bom)
    implementation libs.coroutines.android
    testImplementation libs.coroutines.test

    testImplementation libs.mockk.mockk
    testImplementation libs.mockk.jvm
    testImplementation libs.truth

    testImplementation libs.spek.jvm
    testRuntimeOnly libs.spek.runner
    testImplementation libs.kotlin.reflect
    testImplementation libs.junit5.api
    testRuntimeOnly libs.junit5.engine
    debugImplementation libs.compose.manifest

    androidTestImplementation libs.truth
    // androidTest走らせるworkaround
    // https://github.com/mockk/mockk/issues/281
    androidTestImplementation (libs.mockk.android) { exclude module: 'objenesis' }
    androidTestImplementation 'org.objenesis:objenesis:3.3'

    androidTestImplementation libs.mockk.jvm
    androidTestImplementation libs.dagger.hiltAndroidTesting
    kaptAndroidTest libs.dagger.hiltCompiler
    androidTestImplementation libs.junit5.api
    androidTestRuntimeOnly libs.junit5.engine
    androidTestImplementation libs.junit5.android.testCore
    androidTestRuntimeOnly libs.junit5.android.testRunner
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso
    androidTestImplementation libs.compose.junit
}